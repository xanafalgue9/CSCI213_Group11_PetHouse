@page "/adopt"
@using Microsoft.EntityFrameworkCore
@using PetHouse.Models
@inject IDbContextFactory<PetHouse.Data.PetHouseContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<div>

    @if ( Pet is null )
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <h2>Apply to Adopt</h2>
        <hr />
        <div class="row">
            <div class="col-md-4">
                <EditForm method="post" Model="Application" OnValidSubmit="AddApplication" FormName="create" Enhance>
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert"/>

                    <div class="mb-2">
                        <dt>Dog:</dt>
                        <dd>@Pet.DogName</dd>
                    </div>  

                    <div class="mb-2">
                        <label for="submissionmessage" class="form-label">Message:</label> 
                        <InputText id="submissionmessage" @bind-Value="Application.SubmissionMessage" class="form-control" aria-required="true"/> 
                        <ValidationMessage For="() => Application.SubmissionMessage" class="text-danger" /> 
                    </div>        

                    <button type="submit" class="btn btn-primary">Submit application</button>
                </EditForm>
            </div>
        </div>
    }

</div>

@code {
    [SupplyParameterFromForm]
    private Application Application { get; set; } = new();

    [SupplyParameterFromQuery(Name = "dogId")]
    private int DogID { get; set; }

    private Dog? Pet { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Dog? doggo = await context.Dog.FirstOrDefaultAsync(d => d.Id == DogID);

        if ( doggo is null )
        {
            NavigationManager.NavigateTo("notfound");
        }
        else
        {
            Pet = doggo;
        }
    }

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddApplication()
    {
        using var context = DbFactory.CreateDbContext();
        context.Application.Add(Application);

        Application.Adopter = null;
        Application.Pet = Pet;      // Pet is not null, but property somehow ends up being null regardless
        Application.DateSubmission = DateOnly.FromDateTime(DateTime.Now);
        Application.DateEvaluation = DateOnly.MinValue;
        Application.EvaluationMessage = null;
        Application.Status = 0;

        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/applications");
    }
}
