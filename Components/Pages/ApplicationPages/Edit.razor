@page "/applications/edit"
@using Microsoft.EntityFrameworkCore
@using PetHouse.Models
@inject IDbContextFactory<PetHouse.Data.PetHouseContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h2>Edit application</h2>
<hr />
@if (Application is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Application" OnValidSubmit="UpdateApplication" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>

                <input type="hidden" name="Application.Id" value="@Application.Id" />

                <div class="mb-3">
                    <label for="datesubmission" class="form-label">Date submitted:</label>
                    <InputDate id="datesubmission" @bind-Value="Application.DateSubmission" class="form-control" />
                    <ValidationMessage For="() => Application.DateSubmission" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="submissionmessage" class="form-label">Submission message:</label>
                    <InputText id="submissionmessage" @bind-Value="Application.SubmissionMessage" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Application.SubmissionMessage" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="dateevaluation" class="form-label">Date evaluated:</label>
                    <InputDate id="dateevaluation" @bind-Value="Application.DateEvaluation" class="form-control" />
                    <ValidationMessage For="() => Application.DateEvaluation" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="evaluationmessage" class="form-label">Evaluation message:</label>
                    <InputText id="evaluationmessage" @bind-Value="Application.EvaluationMessage" class="form-control" />
                    <ValidationMessage For="() => Application.EvaluationMessage" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="statusradiogroup" class="form-label">Status:</label>
                    <InputRadioGroup @bind-Value="Application.Status" id="statusradiogroup" aria-required="true">
                        <div class="form-check">
                            <InputRadio Value="0" class="form-check-input" id="status-Submitted" />
                            <label class="form-check-label" for="status-Submitted">Submitted</label>
                        </div>

                        <div class="form-check">
                            <InputRadio Value="1" class="form-check-input" id="status-Accepted" />
                            <label class="form-check-label" for="status-Accepted">Accepted</label>
                        </div>

                        <div class="form-check">
                            <InputRadio Value="-1" class="form-check-input" id="status-Declined" />
                            <label class="form-check-label" for="status-Declined">Declined</label>
                        </div>
                    </InputRadioGroup>
                    <ValidationMessage For="() => Application.Status" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <br />
    <a href="/applications">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Application? Application { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Application ??= await context.Application.FirstOrDefaultAsync(m => m.Id == Id);

        if (Application is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateApplication()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Application!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ApplicationExists(Application!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/applications");
    }

    private bool ApplicationExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Application.Any(e => e.Id == id);
    }
}
