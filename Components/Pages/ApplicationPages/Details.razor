@page "/applications/details"
@using Microsoft.EntityFrameworkCore
@using PetHouse.Models
@inject IDbContextFactory<PetHouse.Data.PetHouseContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Application Details</PageTitle>

<div>
    @if (application is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <h2>Application Details</h2>
        <hr />
        <dl class="row">
            <dt class="col-sm-3">Adopter:</dt>
            <dd class="col-sm-9">
                @if (application.Adopter != null)
                {
                    string name = application.Adopter.FirstName + " " +
                                  application.Adopter.LastName;
                    <a href="@($"/users/details?id={application.Adopter.Id}")">@name</a>
                }
                else
                {
                    <span>N/A</span>
                }
            </dd>

            <dt class="col-sm-3">Dog:</dt>
            <dd class="col-sm-9">
                @if (application.Pet != null)
                {
                    <a href="@($"/dog?id={application.Pet.Id}")">@application.Pet.DogName</a>
                }
                else
                {
                    <span>N/A</span>
                }
            </dd>

            <dt class="col-sm-3">Status:</dt>
            <dd class="col-sm-9">
                @if ( application.Status == 0 )
                {
                    <span>Submitted</span>
                }
                else if ( application.Status == 1 )
                {
                    <span>Accepted</span>
                }
                else if ( application.Status == -1 )
                {
                    <span>Declined</span>
                }
                else
                {
                    <span>Unknown</span>
                }
            </dd>

            <dt class="col-sm-3">Date submitted:</dt>
            <dd class="col-sm-9">@application.DateSubmission.ToString()</dd>

            <dt class="col-sm-3">Submission message:</dt>
            <dd class="col-sm-9">@application.SubmissionMessage</dd>

            <dt class="col-sm-3">Date evaluated:</dt>
            <dd class="col-sm-9">
                @if ( application.Status != 0 )
                {
                    <span>@application.DateEvaluation.ToString()</span>
                }
                else
                {
                    <span>N/A</span>
                }
            </dd>

            <dt class="col-sm-3">Evaluation message:</dt>
            <dd class="col-sm-9">
                @if ( application.Status != 0 )
                {
                    <span>@application.EvaluationMessage</span>
                }
                else
                {
                    <span>N/A</span>
                }
            </dd>
        </dl>

        @if ( application.Status == 0 )     // only include evaluation form if application is unevaluated
        {
            <hr />
            <EditForm method="post" Model="application" OnValidSubmit="EvaluateApplication"
                      FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />

                <!-- If these weren't here, then they would automatically be reset to null/default vals -->
                <!-- So they're included but are also hidden because we don't want them to be changed! -->
                <div class="d-none">
                    <input type="hidden" name="application.Id" value="@application.Id" />
                    <InputDate id="datesubmission" @bind-Value="application.DateSubmission" class="form-control" />
                    <ValidationMessage For="() => application.DateSubmission" class="text-danger" />
                    <InputText id="submissionmessage" @bind-Value="application.SubmissionMessage" class="form-control" aria-required="true" />
                    <ValidationMessage For="() => application.SubmissionMessage" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="evalMessage" class="form-label">Evaluation message:</label> 
                    <InputTextArea id="evalMessage" @bind-Value="application.EvaluationMessage"
                                   class="form-control" aria-required="true" />
                    <ValidationMessage For="() => application.EvaluationMessage" class="text-danger" />
                </div>

                <div class="mb-3">
                    <InputRadioGroup @bind-Value="application.Status" aria-required="true">
                        <div class="form-check">
                            <InputRadio Value="1" class="form-check-input" id="status-Accepted" />
                            <label class="form-check-label" for="status-Accepted">Accept</label>
                        </div>

                        <div class="form-check">
                            <InputRadio Value="-1" class="form-check-input" id="status-Declined" />
                            <label class="form-check-label" for="status-Declined">Decline</label>
                        </div>
                    </InputRadioGroup>
                    <ValidationMessage For="() => application.Status" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-primary">Finalize</button>
            </EditForm>
        }

        <div>
            <br />
            <a href="@($"/applications")">Back to List</a>
        </div>
    }
</div>

@code {
    [SupplyParameterFromForm]
    private Application? application { get; set; }

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        application ??= await context.Application.FirstOrDefaultAsync(m => m.Id == Id);

        if (application is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task EvaluateApplication()
    {
        // Set date and time of evaluation to current date and time
        application!.DateEvaluation = DateOnly.FromDateTime(DateTime.Now);

        using var context = DbFactory.CreateDbContext();
        context.Attach(application!).State = EntityState.Modified;
        await context.SaveChangesAsync();

        NavigationManager.NavigateTo("/applications");
    }
}
