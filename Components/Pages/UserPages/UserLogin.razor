@page "/login"
@using Microsoft.EntityFrameworkCore
@using PetHouse.Models
@inject IDbContextFactory<PetHouse.Data.PetHouseContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>User Login</PageTitle>

<h2>Login</h2>

<EditForm Model="LoginCredentials" OnValidSubmit="HandleLogin" FormName="UserLoginForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="username" class="form-label">Username:</label>
        <InputText id="username" class="form-control" @bind-Value="LoginCredentials.Username" />
        <ValidationMessage For="() => LoginCredentials.Username" class="text-danger" />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Password:</label>
        <InputText id="password" class="form-control" type="password" @bind-Value="LoginCredentials.Password" />
        <ValidationMessage For="() => LoginCredentials.Password" class="text-danger" />
    </div>

    <button type="submit" class="btn btn-primary" onsubmit="HandleLogin">Login</button>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger mt-3">@ErrorMessage</div>
    }
</EditForm>

@code {
    private User LoginCredentials { get; set; } = new();
    private string ErrorMessage { get; set; } = string.Empty;

    private async Task HandleLogin()
    {
        using var context = DbFactory.CreateDbContext();

        // Check if the user exists with the matching username and password
        var user = await context.User
            .FirstOrDefaultAsync(u => u.Username == LoginCredentials.Username
                                   && u.Password == LoginCredentials.Password);

        if (user != null)
        {
            // Redirect to the user's dashboard or homepage
            NavigationManager.NavigateTo("/listings");
        }
        else
        {
            // Display an error message
            ErrorMessage = "Invalid username or password.";
        }
    }
}

