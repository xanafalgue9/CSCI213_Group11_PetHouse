@page "/register"
@using PetHouse.Models


<PageTitle>Register</PageTitle>

<h2>User Registration</h2>

<EditForm Model="newUser" OnValidSubmit="OnFormSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset>
        <legend>Account Details</legend>

        <div class="mb-3">
            <label for="username" class="form-label">Username:</label>
            <InputText id="username" class="form-control" @bind-Value="newUser.Username" />
        </div>

        <div class="mb-3">
            <label for="password" class="form-label">Password:</label>
            <InputText id="password" class="form-control" type="password" @bind-Value="newUser.Password" />
            <small class="form-text text-muted">
                Password should be 8-30 characters long and include at least one letter, number, and special character.
            </small>
        </div>
    </fieldset>

    <fieldset>
        <legend>Personal Information</legend>

        <div class="mb-3">
            <label for="firstName" class="form-label">First Name:</label>
            <InputText id="firstName" class="form-control" @bind-Value="newUser.FirstName" />
        </div>

        <div class="mb-3">
            <label for="lastName" class="form-label">Last Name:</label>
            <InputText id="lastName" class="form-control" @bind-Value="newUser.LastName" />
        </div>

        <div class="mb-3">
            <label for="email" class="form-label">Email:</label>
            <InputText id="email" class="form-control" @bind-Value="newUser.Email" />
        </div>

        <div class="mb-3">
            <label for="phone" class="form-label">Phone:</label>
            <InputText id="phone" class="form-control" @bind-Value="newUser.Phone" />
        </div>

        <div class="mb-3">
            <label for="age" class="form-label">Age:</label>
            <InputNumber id="age" class="form-control" @bind-Value="newUser.Age" />
        </div>

        <div class="mb-3">
            <label for="location" class="form-label">Location:</label>
            <InputText id="location" class="form-control" @bind-Value="newUser.Location" />
        </div>
    </fieldset>

    <fieldset>
        <legend>Additional Information</legend>

        <div class="mb-3">
            <label for="annualIncome" class="form-label">Annual Income ($):</label>
            <InputNumber id="annualIncome" class="form-control" @bind-Value="newUser.AnnualIncome" />
        </div>

        <div class="mb-3">
            <label for="numPreownedPets" class="form-label">Number of Owned Pets:</label>
            <InputNumber id="numPreownedPets" class="form-control" @bind-Value="newUser.NumPreownedPets" />
        </div>
    </fieldset>

    <button type="submit" class="btn btn-primary">Register Account</button>
</EditForm>

@code {
    public class User
    {

        //user class added from User.cs (wouldn't implement)
        public string? Username { get; set; }

        /*
         * Password requirements:
         *     At least 8 characters
         *     At most 30 characters
         *     Contains a letter
         *     Contains a number
         *     Contains one of the following symbols:
         *         ! @ # $ % ^ & * - _ + = : , . ?
         */

        public string? Password { get; set; }


        public string? FirstName { get; set; }

        
        public string? LastName { get; set; }

        public string? Email { get; set; }

        public string? Phone { get; set; }


        public int Age { get; set; }


        public string? Location { get; set; }


        public double? AnnualIncome { get; set; }


        public int? NumPreownedPets { get; set; }
    }

    public User newUser = new User();

    private async Task OnFormSubmit()
    {
        
        Console.WriteLine($"User {newUser.Username} has been registered.");

        // Placeholder for database save logic
        // You can replace this with actual service calls or repository methods.

        // Example: await userRepository.SaveUserAsync(newUser);

        // Redirect or show a message here (adjust as needed).
        // Example: RedirectTo("/success");
    }
}

